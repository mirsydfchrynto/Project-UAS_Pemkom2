
package app;

import java.io.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.SwingWorker;
import javax.swing.table.TableRowSorter;


public class MainFrame extends JFrame {

    private final DefaultTableModel model;
    private List<Item> barangList;
    private final TableRowSorter<DefaultTableModel> rowSorter;
    private boolean sudahLoadSer = false;

    public MainFrame() {
        initComponents();
        model = (DefaultTableModel) tblBarang.getModel();
        model.setColumnIdentifiers(new Object[]{"Nama", "Kategori", "Tanggal Beli", "Kondisi", "Jumlah"});

        rowSorter = new TableRowSorter<>(model);
        tblBarang.setRowSorter(rowSorter);

        loadDataBarangAsync();
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        javax.swing.Timer timer = new javax.swing.Timer(5000, e -> {
            boolean online = NetworkUtil.isInternetAvailable();
            lblStatus.setText("Status: " + (online ? "Online" : "Offline"));
            lblStatus.setForeground(online ? new java.awt.Color(0, 128, 0) : new java.awt.Color(255, 0, 0));
        });
        timer.start();
    }

    private void loadDataFromMongo() {
        model.setRowCount(0);
        barangList = MongoDBHelper.loadAll();
        for (Item item : barangList) {
            model.addRow(new Object[]{
                item.getNama(),
                item.getKategori(),
                item.getTanggalBeli(),
                item.getKondisi(),
                item.getJumlah()
            });

        }
    }

    private void tampilkanKeTabel(List<Item> items) {
        model.setRowCount(0);
        for (Item item : items) {
            model.addRow(new Object[]{
                item.getNama(),
                item.getKategori(),
                item.getTanggalBeli(),
                item.getKondisi(),
                item.getJumlah()
            });

        }
    }

    private void loadDataBarangAsync() {
        new SwingWorker<List<Item>, Void>() {
            @Override
            protected List<Item> doInBackground() throws Exception {
                return MongoDBHelper.loadAll();
            }

            @Override
            protected void done() {
                try {
                    List<Item> items = get();
                    tampilkanKeTabel(items);
                    JOptionPane.showMessageDialog(null, "Data berhasil dimuat.");
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Gagal memuat data.");
                }
            }
        }.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBarang = new javax.swing.JTable();
        btnSimpan = new javax.swing.JButton();
        btnTambah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        txtCari = new javax.swing.JTextField();
        Pencarian = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        btnload = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        tblBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBarang);

        btnSimpan.setText("backup");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnTambah.setText("tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnHapus.setText("hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        txtCari.setToolTipText("");
        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });
        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCariKeyReleased(evt);
            }
        });

        Pencarian.setText("Pencarian");

        logout.setText("logout");
        logout.setToolTipText("");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        btnload.setText("load");
        btnload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnloadActionPerformed(evt);
            }
        });

        btnEdit.setText("edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jButton3.setText("refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSimpan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTambah)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnHapus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(Pencarian)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSimpan)
                        .addComponent(btnload)
                        .addComponent(btnTambah)
                        .addComponent(btnHapus)
                        .addComponent(logout)
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Pencarian))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        SoundUtil.play("pen.wav");
        String nama = JOptionPane.showInputDialog(this, "Nama Barang:");
        String kategori = JOptionPane.showInputDialog(this, "Kategori:");
        String tanggal = JOptionPane.showInputDialog(this, "Tanggal Beli (yyyy-mm-dd):");
        String kondisi = JOptionPane.showInputDialog(this, "Kondisi:");

        if (nama != null && kategori != null && tanggal != null && kondisi != null) {
            String jumlahStr = JOptionPane.showInputDialog(this, "Jumlah:");
            int jumlah = 0;
            try {
                jumlah = Integer.parseInt(jumlahStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka.");
                return;
            }

            Item item = new Item(nama, kategori, tanggal, kondisi, jumlah);

            MongoDBHelper.insertItem(item); // Simpan ke MongoDB
            loadDataFromMongo(); // Refresh tabel
        } else {
            JOptionPane.showMessageDialog(this, "Input tidak boleh kosong!");
        }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        SoundUtil.play("pen.wav");

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan Backup");
        fileChooser.setSelectedFile(new java.io.File("backup.ser"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            java.io.File fileToSave = fileChooser.getSelectedFile();
            List<Item> list = MongoDBHelper.loadAll();
            LocalBackup.saveToFile(list, fileToSave.getAbsolutePath());

            JOptionPane.showMessageDialog(this, "Data berhasil dibackup ke " + fileToSave.getAbsolutePath());
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        SoundUtil.play("pen.wav");
        int selectedRow = tblBarang.getSelectedRow();
        if (selectedRow >= 0) {
            String nama = model.getValueAt(selectedRow, 0).toString();
            MongoDBHelper.deleteItemByNama(nama); // Hapus dari MongoDB
            loadDataFromMongo(); // Refresh tabel
        } else {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus!");
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:
        String text = txtCari.getText();
        if (text.trim().length() == 0) {
            rowSorter.setRowFilter(null); // tampil semua
        } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text)); // filter dengan teks
        }

    }//GEN-LAST:event_txtCariActionPerformed

    private void txtCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyReleased
        // TODO add your handling code here:
        String text = txtCari.getText();
        if (text.trim().length() == 0) {
            rowSorter.setRowFilter(null);
        } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
    }//GEN-LAST:event_txtCariKeyReleased

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        SoundUtil.play("pen.wav");
        new LoginFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void btnloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnloadActionPerformed
        // TODO add your handling code here:
        SoundUtil.play("pen.wav");

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File Backup (.ser)");
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            if (!selectedFile.getName().endsWith(".ser")) {
                JOptionPane.showMessageDialog(this, "File harus berformat .ser");
                return;
            }

            List<Item> loadedItems = LocalBackup.loadFromFile(selectedFile.getAbsolutePath());

            if (loadedItems == null || loadedItems.isEmpty()) {
                JOptionPane.showMessageDialog(this, "File kosong atau tidak valid.");
                return;
            }

            int opsi = JOptionPane.showOptionDialog(
                    this,
                    "Data akan diimpor ke aplikasi.\n\nSebaiknya backup dahulu sebelum mengganti data.\n\nPilih opsi:",
                    "Konfirmasi Import",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    new String[]{"Tambahkan", "Ganti Semua", "Batal"},
                    "Tambahkan"
            );

            if (opsi == JOptionPane.CANCEL_OPTION || opsi == JOptionPane.CLOSED_OPTION) {
                JOptionPane.showMessageDialog(this, "Import dibatalkan.");
                return;
            }

            if (opsi == 1) { // Ganti semua
                MongoDBHelper.deleteAll();
            }

            for (Item item : loadedItems) {
                MongoDBHelper.insertItem(item);
            }

            loadDataFromMongo(); // Refresh tabel setelah import
            JOptionPane.showMessageDialog(this, "Data berhasil diimpor dan disimpan ke MongoDB.");
        }
    }//GEN-LAST:event_btnloadActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        SoundUtil.play("pen.wav");
        int selectedRow = tblBarang.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Pilih data yang ingin diedit!");
            return;
        }

        // Ambil data lama
        String namaLama = model.getValueAt(selectedRow, 0).toString();
        String kategoriLama = model.getValueAt(selectedRow, 1).toString();
        String tanggalLama = model.getValueAt(selectedRow, 2).toString();
        String kondisiLama = model.getValueAt(selectedRow, 3).toString();

        // Form input baru (bisa langsung isi dengan data lama)
        String namaBaru = JOptionPane.showInputDialog(this, "Nama Barang:", namaLama);
        String kategoriBaru = JOptionPane.showInputDialog(this, "Kategori:", kategoriLama);
        String tanggalBaru = JOptionPane.showInputDialog(this, "Tanggal Beli (yyyy-mm-dd):", tanggalLama);
        String kondisiBaru = JOptionPane.showInputDialog(this, "Kondisi:", kondisiLama);

        // Validasi
        if (namaBaru == null || kategoriBaru == null || tanggalBaru == null || kondisiBaru == null) {
            JOptionPane.showMessageDialog(this, "Edit dibatalkan.");
            return;
        }

        // Buat objek baru dan update ke database
        String jumlahLama = model.getValueAt(selectedRow, 4).toString();
        String jumlahBaruStr = JOptionPane.showInputDialog(this, "Jumlah:", jumlahLama);
        int jumlahBaru;
        try {
            jumlahBaru = Integer.parseInt(jumlahBaruStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka.");
            return;
        }
        Item itemBaru = new Item(namaBaru, kategoriBaru, tanggalBaru, kondisiBaru, jumlahBaru);
        MongoDBHelper.updateItemByNama(namaLama, itemBaru);

        loadDataFromMongo(); // refresh tabel
        JOptionPane.showMessageDialog(this, "Data berhasil diupdate.");
    }//GEN-LAST:event_btnEditActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        SoundUtil.play("pen.wav");
        loadDataFromMongo();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new MainFrame().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Pencarian;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnload;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JButton logout;
    private javax.swing.JTable tblBarang;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables
}
